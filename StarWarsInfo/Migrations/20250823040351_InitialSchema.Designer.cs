// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StarWarsInfo.Data;

#nullable disable

namespace StarWarsInfo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250823040351_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FilmPerson", b =>
                {
                    b.Property<int>("CharactersPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("FilmsFilmId")
                        .HasColumnType("integer");

                    b.HasKey("CharactersPersonId", "FilmsFilmId");

                    b.HasIndex("FilmsFilmId");

                    b.ToTable("FilmPerson");
                });

            modelBuilder.Entity("FilmPlanet", b =>
                {
                    b.Property<int>("FilmsFilmId")
                        .HasColumnType("integer");

                    b.Property<int>("PlanetsPlanetId")
                        .HasColumnType("integer");

                    b.HasKey("FilmsFilmId", "PlanetsPlanetId");

                    b.HasIndex("PlanetsPlanetId");

                    b.ToTable("FilmPlanet");
                });

            modelBuilder.Entity("FilmSpecies", b =>
                {
                    b.Property<int>("FilmsFilmId")
                        .HasColumnType("integer");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("FilmsFilmId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("FilmSpecies");
                });

            modelBuilder.Entity("FilmStarship", b =>
                {
                    b.Property<int>("FilmsFilmId")
                        .HasColumnType("integer");

                    b.Property<int>("StarshipsStarshipId")
                        .HasColumnType("integer");

                    b.HasKey("FilmsFilmId", "StarshipsStarshipId");

                    b.HasIndex("StarshipsStarshipId");

                    b.ToTable("FilmStarship");
                });

            modelBuilder.Entity("FilmVehicle", b =>
                {
                    b.Property<int>("FilmsFilmId")
                        .HasColumnType("integer");

                    b.Property<int>("VehiclesVehicleId")
                        .HasColumnType("integer");

                    b.HasKey("FilmsFilmId", "VehiclesVehicleId");

                    b.HasIndex("VehiclesVehicleId");

                    b.ToTable("FilmVehicle");
                });

            modelBuilder.Entity("PersonSpecies", b =>
                {
                    b.Property<int>("PeoplePersonId")
                        .HasColumnType("integer");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("PeoplePersonId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("PersonSpecies");
                });

            modelBuilder.Entity("PersonStarship", b =>
                {
                    b.Property<int>("PilotsPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("StarshipsStarshipId")
                        .HasColumnType("integer");

                    b.HasKey("PilotsPersonId", "StarshipsStarshipId");

                    b.HasIndex("StarshipsStarshipId");

                    b.ToTable("PersonStarship");
                });

            modelBuilder.Entity("PersonVehicle", b =>
                {
                    b.Property<int>("PilotsPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("VehiclesVehicleId")
                        .HasColumnType("integer");

                    b.HasKey("PilotsPersonId", "VehiclesVehicleId");

                    b.HasIndex("VehiclesVehicleId");

                    b.ToTable("PersonVehicle");
                });

            modelBuilder.Entity("StarWarsInfo.Models.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilmId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<string>("OpeningCrawl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FilmId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("StarWarsInfo.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("BirthYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EyeColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HairColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("HomeworldId")
                        .HasColumnType("integer");

                    b.Property<int?>("Mass")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkinColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonId");

                    b.HasIndex("HomeworldId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("StarWarsInfo.Models.Planet", b =>
                {
                    b.Property<int>("PlanetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlanetId"));

                    b.Property<string>("Climate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Diameter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Gravity")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrbitalPeriod")
                        .HasColumnType("integer");

                    b.Property<long?>("Population")
                        .HasColumnType("bigint");

                    b.Property<int?>("RotationPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurfaceWater")
                        .HasColumnType("integer");

                    b.Property<string>("Terrain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PlanetId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("StarWarsInfo.Models.Species", b =>
                {
                    b.Property<int>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpeciesId"));

                    b.Property<int?>("AverageHeight")
                        .HasColumnType("integer");

                    b.Property<int?>("AverageLifespan")
                        .HasColumnType("integer");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EyeColors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HairColors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HomeworldId")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkinColors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SpeciesId");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("StarWarsInfo.Models.Starship", b =>
                {
                    b.Property<int>("StarshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StarshipId"));

                    b.Property<decimal?>("CargoCapacity")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Consumables")
                        .HasColumnType("text");

                    b.Property<decimal?>("CostInCredits")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Crew")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("HyperdriveRating")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("MaxAtmospheringSpeed")
                        .HasColumnType("numeric");

                    b.Property<int?>("Mglt")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "MGLT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Passengers")
                        .HasColumnType("integer");

                    b.Property<string>("StarshipClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StarshipId");

                    b.ToTable("Starships");
                });

            modelBuilder.Entity("StarWarsInfo.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("CargoCapacity")
                        .HasColumnType("text");

                    b.Property<string>("Consumables")
                        .HasColumnType("text");

                    b.Property<decimal?>("CostInCredits")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Crew")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Edited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<int?>("MaxAtmospheringSpeed")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Passengers")
                        .HasColumnType("integer");

                    b.Property<string>("VehicleClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("FilmPerson", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("CharactersPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsInfo.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmPlanet", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsInfo.Models.Planet", null)
                        .WithMany()
                        .HasForeignKey("PlanetsPlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmSpecies", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsInfo.Models.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmStarship", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsInfo.Models.Starship", null)
                        .WithMany()
                        .HasForeignKey("StarshipsStarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmVehicle", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsInfo.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonSpecies", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeoplePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsInfo.Models.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonStarship", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PilotsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsInfo.Models.Starship", null)
                        .WithMany()
                        .HasForeignKey("StarshipsStarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonVehicle", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PilotsPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StarWarsInfo.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StarWarsInfo.Models.Person", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Planet", "Homeworld")
                        .WithMany("Residents")
                        .HasForeignKey("HomeworldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homeworld");
                });

            modelBuilder.Entity("StarWarsInfo.Models.Planet", b =>
                {
                    b.HasOne("StarWarsInfo.Models.Species", null)
                        .WithMany("Homeworld")
                        .HasForeignKey("SpeciesId");
                });

            modelBuilder.Entity("StarWarsInfo.Models.Planet", b =>
                {
                    b.Navigation("Residents");
                });

            modelBuilder.Entity("StarWarsInfo.Models.Species", b =>
                {
                    b.Navigation("Homeworld");
                });
#pragma warning restore 612, 618
        }
    }
}
