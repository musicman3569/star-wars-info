#!/bin/bash
# This script is a convenience script for developers to be able to clear
# any folders/files that are generated by docker or the app to get back
# to a clean initial state. It will prompt on each folder to give the option
# to skip deleting particular folders in the list if desired.

# Exit immediately on failed steps
set -e

# Import common functions and variables for scripts
source "$(dirname "$0")/Common/common-functions.sh"

# Initialize global variables.
{
  # This is the array of directories/files that should be deleted
  # as part of the cleanup process.
  declare dirs_to_remove=(
      "./StarWarsInfoClient/node_modules"
      "./StarWarsInfo/bin"
      "./StarWarsInfo/obj"
  )
}

sudo_cmd=$(get_sudo_cmd)

# Go to the project root folder regardless of where the script was started
cd "${SCRIPT_PATH}/.."

# Present option to remove all named Docker volume mounts.
# Does NOT include bind mounts to local folders.
read -p "Do you want to remove all Docker named volume mounts? (y/n): " response
if [[ "$response" == "y" || "$response" == "Y" ]]; then
    docker-compose down -v
fi

# Iterate over each directory in the array
for dir in "${dirs_to_remove[@]}"; do
    # Check if the directory exists
    if [ -d "$dir" ]; then
        # Prompt the user for confirmation
        read -p "Do you want to delete the directory '$dir'? (y/n): " response

        # Check the user's response
        if [[ "$response" == "y" || "$response" == "Y" ]]; then
            # Recursively delete the directory
            $sudo_cmd rm -rf "$dir"
            log_output "Directory '$dir' has been deleted." "${COLOR_GREEN}"
        else
            log_output "Directory '$dir' has not been deleted." "${COLOR_RED}"
        fi
    else
        log_output "Directory '$dir' does not exist, no action needed." "${COLOR_GREEN}"
    fi
done